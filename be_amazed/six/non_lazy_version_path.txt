/**
 * I suppose a path is a linked list of doors close to each other
 * (no door should be placed on the path of 2 adjacent doors)
 *
 * It uses the left_bottom/top_right convention
 */

find_path(start, end, L_i) is :
|
|	if start is end :
|	|	return
|
|	anc = common_ancestor(start, end)
|	insert_after(L_i, anc.door) // insert anc.door after L_i
|
|	before, after = adjacent_leaf_rooms(anc)
|	if (before is start) and (after is end) :
|	|	return
|
|	find_path(start, before, L_i)
|	find_path(after, end, L_(i+1))
end

common_ancestor(room_1, room_2) is :
|	ancestors_1 = [room_1]
|	ancestors_2 = [room_2]
|
|	while(inter(ancestors_1, ancestors_2) == empty) do :
|	|	append(ancestors_1, latest(ancestors_1).parent)
|	|	append(ancestors_2, latest(ancestors_2).parent)
|
|	return inter(ancestors_1, ancestors_2)
end

adjacent_leaf_rooms(room) is :
|	return (adjacent_leaf_room_rec(room, room.right_son), \
|			adjacent_leaf_room_rec(room, room.left_son))
end

adjacent_leaf_room_rec(room, candidate) is :
|	if is_leaf(candidate) :
|	|	return candidate
|
|	ls = candidate.left_son;
|	if room.is_vertical :
|	|	if (room.off_h + room.door_pos) is between ls.off_h and ls.off_h + ls.h:
|	|	|	return adjacent_right_leaf_room(room, candidate.left_son)	
|	|	else :
|	|	|	return adjacent_right_leaf_room(room, candidate.right_son)
|	else :
|	|	/* same with the width instead of the height */
end

main is:
|	L = [IN_DOOR -> OUT_DOOR]
|	      L_in       L_out
|
|	find_path(entrance, exit, L_in)
end
