/**
 * An algorith of minimum spanning tree
 * Inspired by Luan
 *
 * Let's suppose :
 *	the starting point is (x0, y0)
 *	there are N holes to drill, their positions denoted by (xi, yi) 
 *	<em>There is no need to go back to the starting point.</em>
 */

struct Node is:
	int x, y
	/* The followings are updated by min_spanning_tree */
	int *mst_connected
	int nb_mst_connected

follow_min_spanning_tree(way, nodes):
	cur = way.last()
	
	do
	|	/* TODO */
	while (cur->nb_mst_connected != 1)

compute_way() is :
	nodes = array of Node(0..N) /* The initial point is counted as a node */
	M = compute_M(nodes) // O(N^2)

	used_nodes = []
	way = [Node[0]]
	while len(way) < N+1 do:
		compute_min_spanning_tree(nodes, used_nodes) // O(N^2)
		follow_min_spanning_tree(way, nodes)
	done

	return way
end
