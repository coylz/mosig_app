/**
 * An algorith of minimum spanning tree
 * Inspired by Luan
 *
 * Let's suppose :
 *	the starting point is (x0, y0)
 *	there are N holes to drill, their positions denoted by (xi, yi) 
 *	<em>There is no need to go back to the starting point.</em>
 */

struct Node is:
	int x, y
	/* The followings are updated by min_spanning_tree */
	int *mst_connected
	int nb_mst_connected

follow_min_spanning_tree(way, nodes):
	cur = way.last()
	do
	 	used_node.append(cur)
	 	min_next = cur->mst_connected[0]
	 	min = M[cur][min_next]
	 	for j in 2..nb_mst_connected do
	 	 	if M[cur][cur->mst_connected[j]] < min:
	 	 	 	min_next = cur->mst_connected[j]
	 	 	 	min = M[cur][min_next]
	 	done
	 	cur = min_next
	 	way.append(cur)
	while (cur->nb_mst_connected != 1)
	/* At this point we reached the end of the path */

compute_min_spanning_tree(nodes, M) is :
	nodes_taken = [nodes[0]]
	spanning_tree = []
	while len(nodes_taken) != len(nodes) do:
		min = infinite
		for vi in nodes_taken do:
			for vj in nodes \Â nodes_taken do:
				if M[vi][vj] < min:
					min = M[vi][vj]
					vi_chosen = vi
					vj_chosen = vj
			done
		done
		nodes_taken.append(min_edge[1])
		vi_chosen.mst_connected[nb_mst_connected++] = vj_chosen
		vj_chosen.mst_connected[nb_mst_connected++] = vi_chosen
	done
end

compute_way() is :
	nodes = array of Node(0..N) /* The initial point is counted as a node */
	M = compute_M(nodes) // O(N^2)

	used_nodes = []
	way = [Node[0]]
	while len(way) < N+1 do:
		compute_min_spanning_tree(nodes \ used_nodes, M) // O(N^2)
		follow_min_spanning_tree(way, nodes)
	done

	return way
end
